#!/bin/bash

die() {
  echo "$1"
  exit 1
}

download() {
  case $AUTODOWNLOAD in
    esr) URL=-esr ;;
    beta) URL=-beta ;;
    *) URL=
  esac
  _base="$AUTODOWNLOAD-latest.tar.bz2"
  _dom="archive.mozilla.org"
  _rel="pub/firefox/nightly/latest-mozilla-central"
  _narch="firefox-*.en-US.linux-x86_64.tar.bz2"
  # download
  if [[ "$AUTODOWNLOAD" = "esr" ]] || [[ "$AUTODOWNLOAD" = "release" ]] || [[ "$AUTODOWNLOAD" = "beta" ]]; then
    wget -O /tmp/"$_base" "https://download.mozilla.org/?product=firefox${URL}-latest&os=linux64&lang=en-US"
    version=$(tar xvf /tmp/"$_base" firefox/application.ini -O | grep -Po '(?<=^Version=).*')
  elif [[ "$AUTODOWNLOAD" = "nightly" ]]; then
    pushd /tmp
    wget -r --no-parent -A "$_narch" -X /"$_rel"/mar-tools https://"$_dom"/"$_rel"/
    nightly_tar="$(find "/tmp/$_dom/$_rel" -name "$_narch" -print)"
    # version=$(tar xvf "$nightly_tar" firefox/application.ini -o | grep '^version=.*' | sed 's/version=//g')
    version=$(tar xvf "$nightly_tar" firefox/application.ini -o | grep -Po '(?<=^Version=).*')
    popd
  fi
  LOCATION="/tmp/${AUTODOWNLOAD}-${version}"
  if ! test -d "${LOCATION}"; then
    mkdir "${LOCATION}"
    # unpack
    if [[ "$AUTODOWNLOAD" = "esr" ]] || [[ "$AUTODOWNLOAD" = "release" ]] || [[ "$AUTODOWNLOAD" = "beta" ]]; then
      tar xvjf /tmp/"$_base" --strip-components=1 -C "${LOCATION}"
    elif [[ "$AUTODOWNLOAD" = "nightly" ]]; then
      tar xvjf "$nightly_tar" --strip-components=1 -C "${LOCATION}"
    fi
    # cleanup
    if [[ "$AUTODOWNLOAD" = "nightly" ]]; then
      rm -rf /tmp/"$_dom"
    else
      rm -rf -- /tmp/"$_base"
    fi
  fi
}

start() {
  if [[ ! -z "$AUTODOWNLOAD" ]]; then
    echo "Downloading firefox version: $AUTODOWNLOAD"
    download "$AUTODOWNLOAD"
  fi
  fxbranch="$AUTODOWNLOAD"-
  fxver="$version"-
  date=$(date +%d.%m.%G-%T)
  profile=${PROFILE:-$(mktemp -d /tmp/firefox-"${fxbranch}${fxver}${date}"-XXX)}
  location=${LOCATION:-/usr/lib/firefox}
  logfile=${LOGFILE:-$(mktemp -t firefox-"${fxbranch}${fxver}${date}"-XXX.log)}
  cat > "$profile/user.js" <<END
  user_pref("xpinstall.signatures.required",  false);
  user_pref("browser.shell.checkDefaultBrowser",  false);
  user_pref("browser.cache.disk.parent_directory",  "/dev/shm/firefox-cache");
END
  #cp "${XDG_CACHE_HOME:-${HOME}/.cache}/search.json.mozlz4" "$profile" || die "for now, search.json.mozlz4 file is the only way to set the default search engine"
  if [[ ! -z "$INFO" ]]; then
    echo "Using date: $date"
    echo "Using profile dir: $profile"
    echo "Using firefox location: $location"
    echo "Using log file: $logfile"
  fi
  nohup "$location"/firefox --new-instance -profile "$profile" about:blank &>"$logfile" &
}

while getopts "p:l:lg:a:ih" opt; do
  case $opt in
    p) PROFILE="${OPTARG}" ;;
    l) LOCATION="${OPTARG}" ;;
    lg) LOGFILE="${OPTARG}" ;;
    a) AUTODOWNLOAD=${OPTARG} ;;
    i) INFO=true ;;
    h) ACTION="help"
  esac
done

shift $((OPTIND -1))

if [[ -z "$ACTION" ]]; then
    ACTION="${1:-start}"
fi

case "${ACTION}" in
    start) start ;;
    help) echo "usage: ${0} [-p, -l, -lg, -a, -i, -h]
    -p use custom path
    -l use custom firefox location (such as firefox from your package manager or other)
    -lg use custom log location
    -a autodownload one of this versions: esr, release, beta, nightly
    -i output some info
    -h help" ;;
    *) die "invalid action '${ACTION}'" ;;
esac
